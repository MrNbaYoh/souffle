<map id="souffle::LVMNullaryRelation" name="souffle::LVMNullaryRelation">
<area shape="rect" id="node2" href="$classsouffle_1_1_l_v_m_relation.html" title="{souffle::LVMRelation\n||+ begin()\l+ empty()\l+ end()\l+ exists()\l+ extend()\l+ extend()\l+ getArity()\l+ getAttributeTypeQualifiers()\l+ getLevel()\l+ getName()\land 9 more...\l}" alt="" coords="543,2199,754,2423"/>
<area shape="rect" id="node4" href="$classsouffle_1_1_min_index_selection.html" title="computes the minimal index cover for a relation in a RAM Program. " alt="" coords="363,1765,564,2121"/>
<area shape="rect" id="node8" href="$classsouffle_1_1_max_matching.html" title="Computes a maximum matching with Hopcroft&#45;Karp algorithm " alt="" coords="536,1383,700,1549"/>
<area shape="rect" id="node23" href="$structsouffle_1_1detail_1_1btree_1_1base.html" title="The base type of all node types containing essential book&#45;keeping information. " alt="" coords="1398,160,1689,355"/>
<area shape="rect" id="node14" href="$classsouffle_1_1_l_v_m_index.html" title="{souffle::LVMIndex\n||+ begin()\l+ end()\l+ equalRange()\l+ exists()\l+ getIteratorPair()\l+ insert()\l+ insert()\l+ lowerUpperBound()\l+ LVMIndex()\l+ LVMIndex()\l+ order()\l+ print()\l+ purge()\l}" alt="" coords="1465,2184,1625,2437"/>
<area shape="rect" id="node15" href="$classsouffle_1_1btree__multiset.html" title="{souffle::btree_multiset\l\&lt; const RamDomain *, comparator,\l std::allocator\&lt; const RamDomain\l * \&gt;, 512 \&gt;\n||+ btree_multiset()\l+ btree_multiset()\l+ btree_multiset()\l+ btree_multiset()\l+ operator=()\l+ load()\l&#45; btree_multiset()\l}" alt="" coords="1418,1839,1671,2048"/>
<area shape="rect" id="node16" href="$classsouffle_1_1detail_1_1btree.html" title="{souffle::detail::btree\l\&lt; const RamDomain *, comparator,\l std::allocator\&lt; const RamDomain\l * \&gt;, blockSize, typename detail\l::default_strategy\&lt; const RamDomain\l * \&gt;::type, false, comparator, detail\l::updater\&lt; const RamDomain * \&gt; \&gt;\n||+ begin()\l+ btree()\l+ btree()\l+ btree()\l+ btree()\l+ check()\l+ clear()\l+ contains()\l+ contains()\l+ empty()\land 24 more...\l+ load()\l# btree()\l# covers()\l# equal()\l# less()\l# update()\l# weak_covers()\l# weak_equal()\l# weak_less()\l&#45; coversUpperBound()\l&#45; buildSubTree()\l}" alt="" coords="1411,1229,1678,1703"/>
<area shape="rect" id="node17" href="$structsouffle_1_1detail_1_1btree_1_1hint__statistics.html" title="{souffle::detail::btree\l\&lt; Key, Comparator, Allocator,\l blockSize, SearchStrategy,\l isSet, WeakComparator, Updater\l \&gt;::hint_statistics\n||}" alt="" coords="1848,783,2084,919"/>
<area shape="rect" id="node18" href="$classsouffle_1_1_cache_access_counter.html" title="A utility class to keep track of cache hits/misses. " alt="" coords="1862,167,2070,347"/>
<area shape="rect" id="node21" href="$structsouffle_1_1detail_1_1btree_1_1leaf__node.html" title="The data type representing leaf nodes of the b&#45;tree. " alt="" coords="1683,979,1919,1115"/>
<area shape="rect" id="node22" href="$structsouffle_1_1detail_1_1btree_1_1node.html" title="The actual, generic node implementation covering the operations for both, inner and leaf nodes..." alt="" coords="1475,461,1766,759"/>
<area shape="rect" id="node26" href="$structsouffle_1_1detail_1_1comparator.html" title="A generic comparator implementation as it is used by a b&#45;tree based on types that can be less&#45;than an..." alt="" coords="1431,994,1658,1101"/>
<area shape="rect" id="node27" href="$structsouffle_1_1detail_1_1default__strategy.html" title="{souffle::detail::default\l_strategy\&lt; const RamDomain * \&gt;\n||}" alt="" coords="1076,1001,1317,1093"/>
<area shape="rect" id="node28" href="$structsouffle_1_1detail_1_1binary.html" title="{souffle::detail::binary\n||}" alt="" coords="1119,571,1274,649"/>
<area shape="rect" id="node29" href="$structsouffle_1_1detail_1_1strategy__selection.html" title="{souffle::detail::strategy\l_selection\&lt; binary_search \&gt;\n||}" alt="" coords="1094,211,1299,303"/>
<area shape="rect" id="node30" href="$classsouffle_1_1_optimistic_read_write_lock.html" title="A &#39;sequential&#39; non&#45;locking implementation for an optimistic r/w lock. " alt="" coords="2069,943,2295,1152"/>
<area shape="rect" id="node31" href="$structsouffle_1_1detail_1_1updater.html" title="{souffle::detail::updater\l\&lt; const RamDomain * \&gt;\n||+ update()\l}" alt="" coords="870,1001,1051,1093"/>
</map>
